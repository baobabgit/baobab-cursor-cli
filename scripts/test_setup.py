#!/usr/bin/env python3
"""
Script de test pour v√©rifier la configuration du projet.

Ce script teste que tous les outils de d√©veloppement sont correctement
configur√©s et que le projet peut √™tre install√© et test√©.
"""

import subprocess
import sys
from pathlib import Path


def run_command(cmd: list[str], description: str) -> bool:
    """Ex√©cuter une commande et retourner True si elle r√©ussit."""
    print(f"üîç {description}...")
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        print(f"‚úÖ {description} - Succ√®s")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - √âchec")
        print(f"   Erreur: {e.stderr}")
        return False


def check_python_version() -> bool:
    """V√©rifier la version de Python."""
    version = sys.version_info
    if version.major == 3 and version.minor >= 10:
        print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - OK")
        return True
    else:
        print(f"‚ùå Python {version.major}.{version.minor}.{version.micro} - Version requise: 3.10+")
        return False


def check_project_structure() -> bool:
    """V√©rifier la structure du projet."""
    required_files = [
        "pyproject.toml",
        "requirements.txt",
        "requirements-dev.txt",
        "env.example",
        "conftest.py",
        ".pre-commit-config.yaml",
        "setup.cfg",
    ]
    
    required_dirs = [
        "src/baobab_cursor_cli",
        "tests",
        "docs/coverage",
        "docker",
    ]
    
    all_good = True
    
    for file_path in required_files:
        if Path(file_path).exists():
            print(f"‚úÖ {file_path} - Pr√©sent")
        else:
            print(f"‚ùå {file_path} - Manquant")
            all_good = False
    
    for dir_path in required_dirs:
        if Path(dir_path).exists():
            print(f"‚úÖ {dir_path}/ - Pr√©sent")
        else:
            print(f"‚ùå {dir_path}/ - Manquant")
            all_good = False
    
    return all_good


def main():
    """Fonction principale du script de test."""
    print("üöÄ Test de la configuration du projet Baobab Cursor CLI")
    print("=" * 60)
    
    all_tests_passed = True
    
    # Test 1: Version de Python
    print("\n1. V√©rification de la version de Python")
    all_tests_passed &= check_python_version()
    
    # Test 2: Structure du projet
    print("\n2. V√©rification de la structure du projet")
    all_tests_passed &= check_project_structure()
    
    # Test 3: Installation du projet
    print("\n3. Test d'installation du projet")
    all_tests_passed &= run_command(
        [sys.executable, "-m", "pip", "install", "-e", "."],
        "Installation en mode d√©veloppement"
    )
    
    # Test 4: V√©rification des imports
    print("\n4. Test des imports")
    all_tests_passed &= run_command(
        [sys.executable, "-c", "import baobab_cursor_cli; print('Import OK')"],
        "Import du module principal"
    )
    
    # Test 5: V√©rification des outils de d√©veloppement
    print("\n5. Test des outils de d√©veloppement")
    
    # Black
    all_tests_passed &= run_command(
        [sys.executable, "-m", "black", "--check", "src/", "tests/"],
        "V√©rification du formatage avec Black"
    )
    
    # isort
    all_tests_passed &= run_command(
        [sys.executable, "-m", "isort", "--check-only", "src/", "tests/"],
        "V√©rification du tri des imports avec isort"
    )
    
    # flake8
    all_tests_passed &= run_command(
        [sys.executable, "-m", "flake8", "src/", "tests/"],
        "V√©rification du linting avec flake8"
    )
    
    # mypy
    all_tests_passed &= run_command(
        [sys.executable, "-m", "mypy", "src/baobab_cursor_cli/"],
        "V√©rification des types avec mypy"
    )
    
    # Test 6: Tests unitaires
    print("\n6. Test des tests unitaires")
    all_tests_passed &= run_command(
        [sys.executable, "-m", "pytest", "--version"],
        "V√©rification de pytest"
    )
    
    # Test 7: Couverture de code
    print("\n7. Test de la couverture de code")
    all_tests_passed &= run_command(
        [sys.executable, "-m", "pytest", "--cov=baobab_cursor_cli", "--cov-report=term-missing"],
        "Test de la couverture de code"
    )
    
    # R√©sum√©
    print("\n" + "=" * 60)
    if all_tests_passed:
        print("üéâ Tous les tests sont pass√©s ! La configuration est correcte.")
        sys.exit(0)
    else:
        print("‚ùå Certains tests ont √©chou√©. V√©rifiez la configuration.")
        sys.exit(1)


if __name__ == "__main__":
    main()
