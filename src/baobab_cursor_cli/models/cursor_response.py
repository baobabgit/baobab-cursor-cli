"""
Mod√®le de donn√©es pour les r√©ponses Cursor.

Ce module d√©finit la classe CursorResponse qui repr√©sente la r√©ponse
d'une commande ex√©cut√©e via l'API Cursor CLI.
"""

from typing import Dict, Any, Optional, List, Union
from datetime import datetime
from enum import Enum
from pydantic import BaseModel, Field, validator


class ResponseStatus(str, Enum):
    """Statuts possibles d'une r√©ponse."""
    SUCCESS = "success"
    ERROR = "error"
    TIMEOUT = "timeout"
    CANCELLED = "cancelled"


class CursorResponse(BaseModel):
    """
    Mod√®le repr√©sentant la r√©ponse d'une commande Cursor CLI.
    
    Attributes:
        output: Sortie standard de la commande
        error: Sortie d'erreur de la commande
        exit_code: Code de sortie de la commande
        duration: Dur√©e d'ex√©cution en secondes
        status: Statut de la r√©ponse
        command_id: Identifiant de la commande associ√©e
        created_at: Timestamp de cr√©ation de la r√©ponse
        metadata: M√©tadonn√©es suppl√©mentaires
    """
    
    output: Optional[str] = Field(default="", description="Sortie standard de la commande")
    error: Optional[str] = Field(default="", description="Sortie d'erreur de la commande")
    exit_code: int = Field(default=0, description="Code de sortie de la commande")
    duration: float = Field(default=0.0, description="Dur√©e d'ex√©cution en secondes")
    status: ResponseStatus = Field(default=ResponseStatus.SUCCESS, description="Statut de la r√©ponse")
    command_id: Optional[str] = Field(None, description="Identifiant de la commande associ√©e")
    created_at: datetime = Field(default_factory=datetime.now, description="Timestamp de cr√©ation")
    metadata: Dict[str, Any] = Field(default_factory=dict, description="M√©tadonn√©es suppl√©mentaires")
    
    @validator('exit_code')
    def validate_exit_code(cls, v):
        """Valide le code de sortie."""
        if not isinstance(v, int):
            raise ValueError("Le code de sortie doit √™tre un entier")
        if v < 0 or v > 255:
            raise ValueError("Le code de sortie doit √™tre entre 0 et 255")
        return v
    
    @validator('duration')
    def validate_duration(cls, v):
        """Valide la dur√©e d'ex√©cution."""
        if v < 0:
            raise ValueError("La dur√©e ne peut pas √™tre n√©gative")
        return v
    
    @validator('output', 'error')
    def validate_strings(cls, v):
        """Valide que les cha√Ænes ne sont pas None."""
        return v if v is not None else ""
    
    @property
    def is_success(self) -> bool:
        """
        Indique si la r√©ponse indique un succ√®s.
        
        Returns:
            True si la commande s'est ex√©cut√©e avec succ√®s
        """
        return self.status == ResponseStatus.SUCCESS and self.exit_code == 0
    
    @property
    def is_error(self) -> bool:
        """
        Indique si la r√©ponse indique une erreur.
        
        Returns:
            True si la commande a √©chou√©
        """
        return self.status == ResponseStatus.ERROR
    
    @property
    def is_timeout(self) -> bool:
        """
        Indique si la commande a expir√©.
        
        Returns:
            True si la commande a expir√©
        """
        return self.status == ResponseStatus.TIMEOUT
    
    @property
    def is_cancelled(self) -> bool:
        """
        Indique si la commande a √©t√© annul√©e.
        
        Returns:
            True si la commande a √©t√© annul√©e
        """
        return self.status == ResponseStatus.CANCELLED
    
    def get_formatted_output(self, include_error: bool = True) -> str:
        """
        Retourne la sortie format√©e.
        
        Args:
            include_error: Inclure la sortie d'erreur si pr√©sente
            
        Returns:
            Sortie format√©e
        """
        lines = []
        
        if self.output:
            lines.append("=== OUTPUT ===")
            lines.append(self.output)
        
        if include_error and self.error:
            lines.append("\n=== ERROR ===")
            lines.append(self.error)
        
        return "\n".join(lines)
    
    def get_summary(self) -> str:
        """
        Retourne un r√©sum√© de la r√©ponse.
        
        Returns:
            R√©sum√© format√© de la r√©ponse
        """
        status_emoji = {
            ResponseStatus.SUCCESS: "‚úÖ",
            ResponseStatus.ERROR: "‚ùå",
            ResponseStatus.TIMEOUT: "‚è∞",
            ResponseStatus.CANCELLED: "üö´"
        }
        
        return (f"{status_emoji.get(self.status, '‚ùì')} "
                f"Exit code: {self.exit_code} | "
                f"Duration: {self.duration:.2f}s | "
                f"Status: {self.status.value}")
    
    def to_dict(self) -> Dict[str, Any]:
        """
        Convertit la r√©ponse en dictionnaire.
        
        Returns:
            Dictionnaire repr√©sentant la r√©ponse
        """
        return self.dict()
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'CursorResponse':
        """
        Cr√©e une r√©ponse √† partir d'un dictionnaire.
        
        Args:
            data: Dictionnaire contenant les donn√©es de la r√©ponse
            
        Returns:
            Instance de CursorResponse
        """
        return cls(**data)
    
    def to_json(self) -> str:
        """
        S√©rialise la r√©ponse en JSON.
        
        Returns:
            Cha√Æne JSON repr√©sentant la r√©ponse
        """
        return self.json()
    
    @classmethod
    def from_json(cls, json_str: str) -> 'CursorResponse':
        """
        D√©s√©rialise une r√©ponse depuis JSON.
        
        Args:
            json_str: Cha√Æne JSON contenant les donn√©es de la r√©ponse
            
        Returns:
            Instance de CursorResponse
        """
        return cls.parse_raw(json_str)
    
    @classmethod
    def success(cls, output: str = "", duration: float = 0.0, **kwargs) -> 'CursorResponse':
        """
        Cr√©e une r√©ponse de succ√®s.
        
        Args:
            output: Sortie de la commande
            duration: Dur√©e d'ex√©cution
            **kwargs: Arguments suppl√©mentaires
            
        Returns:
            Instance de CursorResponse avec statut SUCCESS
        """
        return cls(
            output=output,
            exit_code=0,
            duration=duration,
            status=ResponseStatus.SUCCESS,
            **kwargs
        )
    
    @classmethod
    def error_factory(cls, error: str = "", exit_code: int = 1, duration: float = 0.0, **kwargs) -> 'CursorResponse':
        """
        Cr√©e une r√©ponse d'erreur.
        
        Args:
            error: Message d'erreur
            exit_code: Code de sortie d'erreur
            duration: Dur√©e d'ex√©cution
            **kwargs: Arguments suppl√©mentaires
            
        Returns:
            Instance de CursorResponse avec statut ERROR
        """
        return cls(
            error=error,
            exit_code=exit_code,
            duration=duration,
            status=ResponseStatus.ERROR,
            **kwargs
        )
    
    @classmethod
    def timeout(cls, duration: float = 0.0, **kwargs) -> 'CursorResponse':
        """
        Cr√©e une r√©ponse de timeout.
        
        Args:
            duration: Dur√©e d'ex√©cution avant timeout
            **kwargs: Arguments suppl√©mentaires
            
        Returns:
            Instance de CursorResponse avec statut TIMEOUT
        """
        return cls(
            error="Command timed out",
            exit_code=124,  # Code standard pour timeout
            duration=duration,
            status=ResponseStatus.TIMEOUT,
            **kwargs
        )
    
    @classmethod
    def cancelled(cls, duration: float = 0.0, **kwargs) -> 'CursorResponse':
        """
        Cr√©e une r√©ponse d'annulation.
        
        Args:
            duration: Dur√©e d'ex√©cution avant annulation
            **kwargs: Arguments suppl√©mentaires
            
        Returns:
            Instance de CursorResponse avec statut CANCELLED
        """
        return cls(
            error="Command was cancelled",
            exit_code=130,  # Code standard pour interruption
            duration=duration,
            status=ResponseStatus.CANCELLED,
            **kwargs
        )
    
    def __str__(self) -> str:
        """Repr√©sentation string de la r√©ponse."""
        return f"CursorResponse(status={self.status.value}, exit_code={self.exit_code})"
    
    def __repr__(self) -> str:
        """Repr√©sentation d√©taill√©e de la r√©ponse."""
        return (f"CursorResponse(output='{self.output[:50]}...', "
                f"error='{self.error[:50]}...', "
                f"exit_code={self.exit_code}, "
                f"duration={self.duration}, "
                f"status={self.status.value})")
